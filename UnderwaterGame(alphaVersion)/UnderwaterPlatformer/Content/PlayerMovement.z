//Jacob Burke

//Moves the player
class PlayerMovement : ZilchComponent
{
   [Static]
    var Checkpoint1 : Boolean = false;
    
    [Property]
    var Speed:Real = 30;
    
    [Property]
    var JumpSpeed:Real = 20;
    
    [Property]
    var KeyUp:Keys;
    
    [Property]
    var KeyLeft:Keys;
    
    [Property]
    var KeyRight:Keys;
    
    [Property]
    var KeyDown:Keys;
    
    [Property] var SingleJumpSound : SoundCue = SoundCue.SingleJump;
    [Property] var DoubleJumpSound : SoundCue = SoundCue.DoubleJump;
    [Property] var WalkSound : SoundCue;
    [Property] var SoundToPlay : SoundCue = SoundCue.GearPickup;
    [Property] var SoundToPlay2 : SoundCue = SoundCue.SpearStab;
    var SoundToPlay3 : SoundCue = SoundCue.SelectItem;
    var SoundToPlay4 : SoundCue = SoundCue.LegendarySound;
    var SoundToPlay5 : SoundCue = SoundCue.ErrorSound;
    [Static] var PlayErrorSound : Boolean = false;
    
    var CheckOnce : Boolean = false;
    var CheckTwice : Boolean = false;
    
    var Swimming:Boolean = false;
    
    var DoubleJump:Boolean = true;
    
    var TouchingGround:Boolean;
    
    function Initialize(init : CogInitializer)
    {
        
            
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisionPersisted);
        Zero.Connect(this.Owner, Events.CollisionEnded, this.OnCollisionEnded);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        
      
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.Name == ("DefaultTile") && this.Owner.GroundChecker.Grounded == true)
        {
            this.DoubleJump = true;
        }
        
        if(event.OtherObject.Checkpoint != null)
        {
            var checkpointPosition = event.OtherObject.Transform.Translation;

            checkpointPosition.Y = this.Owner.Transform.Translation.Y;

            Checkpoint.RespawnPosition = checkpointPosition;
        }
        
        if(event.OtherObject.Name == "CheckPoint")
        {
            PlayerMovement.Checkpoint1 = true;
        }
    }

    function OnCollisionEnded(event : CollisionEvent)
    {
        if(event.OtherObject.Region != null)
        this.Swimming = false;
    }

    function OnCollisionPersisted(event : CollisionEvent)
    {
        if(event.OtherObject.Region != null)
        this.Swimming = true;
        
        if(event.OtherObject.Name == ("DefaultTile") && this.Owner.GroundChecker.Grounded == true)
        this.TouchingGround = true;
        
        if(this.Owner.GroundChecker.Grounded == false)
        this.TouchingGround = false;
        
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        
        var direction = Real3.Zero;
        
        var velocity = direction * this.Speed;
        
        //Play 90% of sounds - Jessica
        if(Resources.PlaySound == true) 
        {
            Resources.PlaySound = false;
            this.Owner.SoundEmitter.PlayCue(this.SoundToPlay);
        }
        
        if(PlayerStab.PlaySound2 == true)
        {
            PlayerStab.PlaySound2 = false;
            this.Owner.SoundEmitter.PlayCue(this.SoundToPlay2);
        }
        
        if(Eat.PlaySound3 == true)
        {
            Eat.PlaySound3 = false;
            this.Owner.SoundEmitter.PlayCue(this.SoundToPlay3);
        }
        
        if(Resources.PlayLegendarySound == true)
        {
            Resources.PlayLegendarySound = false;
            this.Owner.SoundEmitter.PlayCue(this.SoundToPlay4);
        }
        
        if(PlayerMovement.PlayErrorSound == true) 
        {
            PlayerMovement.PlayErrorSound = false;
            this.Owner.SoundEmitter.PlayCue(this.SoundToPlay5);
        }
        
        //Initializes ring effects.
        if(AdvInventory.PlayerInventory["Ring_Speed"] > 0 && this.CheckOnce == false)
        {
            Console.WriteLine("Speed Activated");
            this.CheckOnce = true;
            this.Speed = this.Speed * 1.2;
        }
        if(AdvInventory.PlayerInventory["Ring_Jump"] > 0 && this.CheckTwice == false)
        {
            Console.WriteLine("Jump Activated");
            this.CheckTwice = true;
            this.JumpSpeed = this.JumpSpeed * 1.2;
        }
        
    
        if(Zero.Keyboard.KeyIsPressed(this.KeyUp) && this.Owner.GroundChecker.Grounded == true
        && this.Swimming == false && this.TouchingGround == true)
        {
            this.Owner.RigidBody.Velocity =
            Real3(this.Owner.RigidBody.Velocity.X, Math.Max(this.JumpSpeed, velocity.Y + this.JumpSpeed), 0);
            this.Owner.SoundEmitter.PlayCue(this.SingleJumpSound);

        }
        
        else if(Zero.Keyboard.KeyIsPressed(this.KeyUp) && this.DoubleJump == true
         && this.Swimming == false)
        {
            this.Owner.RigidBody.Velocity =
            Real3(this.Owner.RigidBody.Velocity.X, 
            Math.Max(this.JumpSpeed, velocity.Y + this.JumpSpeed/2), 0);
            this.Owner.SoundEmitter.PlayCue(this.DoubleJumpSound);
            this.DoubleJump = false;
            
        }
                
        if(Zero.Keyboard.KeyIsDown(this.KeyLeft))
        {
            direction -= Real3.XAxis;
            
        }
        
        if(Zero.Keyboard.KeyIsDown(this.KeyRight))
        {
            direction += Real3.XAxis;
        }
        
        if(Zero.Keyboard.KeyIsDown(this.KeyUp) && this.Swimming == true)
        {
            direction += Real3.YAxis;
        }
        
        if(Zero.Keyboard.KeyIsDown(this.KeyDown) && this.Swimming == true)
        {
            direction -= Real3.YAxis;
        }
        
        this.Owner.RigidBody.Velocity = 
        Math.Lerp(this.Owner.RigidBody.Velocity, direction * this.Speed , event.Dt); 
    }
    

}
//THIS IS JEFFERY'S SCRIPT////////////////////////////////////////////////////////////
class GroundChecker : ZilchComponent
{
  [Dependency] var Contact : Contact;
  
  [Property] var GroundAngle : Real = 61;
  
  var AllGrounds : Array[Cog] = new Array[Cog]();
  var Grounded : Boolean { get { return this.AllGrounds.Count > 0; } }
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.AnyCollision, this.OnAnyCollision);
  }
  function OnAnyCollision(event : AnyCollisionEvent)
  {
      
      if(event.OtherObject.NullObject != null)return;
    var localUp = Math.Transform(Real3.YAxis, this.Owner.Transform.WorldRotation);
    
    if (!event.Ended && Math.AngleBetween(-event.ContactNormal, localUp) < Math.ToRadians(this.GroundAngle))
    {
      if (this.AllGrounds.FindFirstIndex(event.OtherObject) < 0)
      {
        this.AllGrounds.Add(event.OtherObject);
      }
    }
    else
    {
      this.AllGrounds.RemoveAll(event.OtherObject);
    }
  }
}
//THIS IS JEFFERY'S SCRIPT////////////////////////////////////////////////////////////d