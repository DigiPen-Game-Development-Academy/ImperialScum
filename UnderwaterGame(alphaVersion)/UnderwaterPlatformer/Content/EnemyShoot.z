//Jacob Burke, 
//Edited by Jessica (Added god mode and bullet damage... bullet damage is currently a WIP).

//This script makes the enemy shoot...
class EnemyShoot : ZilchComponent
{
    [Property] var Bullet : Archetype = null;
    
    [Property]
    var TimeBetweenShots : Real;
    
    var TimeTillNextShot:Real = 0;
        
    function Initialize(init : CogInitializer)
    { 
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function OnLogicUpdate(event : UpdateEvent)
    {   
        this.TimeTillNextShot -= event.Dt;
        if (this.TimeTillNextShot <= 0)
        {
            this.TimeTillNextShot = this.TimeBetweenShots;
            this.Shoot();
            
        }
        
        if(this.TimeTillNextShot < 0.3)
        {
        this.Owner.Sprite.AnimationSpeed = 1;
        }
        else
        {
            this.Owner.Sprite.AnimationSpeed = 0;
            this.Owner.Sprite.CurrentFrame = 6;
        }
    }
    
    function Shoot()
    {
        
        if (this.Bullet == null) return;
        
        var player = this.Space.FindObjectByName("Player");
        if (player == null) return;
        var bullet = this.Space.CreateAtPosition(this.Bullet, this.Owner.Transform.WorldTranslation);
        if(bullet.BulletLogic == null) return;
        bullet.BulletLogic.Target = player;
    }
    
}
class BulletLogic : ZilchComponent
{
    var Target : Cog = null;
    var VelocitySet : Boolean = false;
    var Velocity : Real3;
    [Property] var Speed : Real = 1;
    
    [Property]
    var VelocityY:Real = 1;
    
    function Initialize(init : CogInitializer)
    {
        
        
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        var player = this.Space.FindObjectByName("Player");

        if(player == null)
        return;
        
        
        this.Owner.Orientation.LookAtPointWithUp(player.Transform.WorldTranslation, Real3(0,0,1));
        
        var velocity = this.Owner.RigidBody.Velocity;
            velocity.Y = this.VelocityY;
            this.Owner.RigidBody.Velocity= velocity;
        
        if(this.Owner.Transform.Translation.X <= player.Transform.Translation.X)
        {
            this.Owner.Transform.Rotation.Y == 180;
        }
        else if(this.Owner.Transform.Translation.X >= player.Transform.Translation.X)
        {
           this.Owner.Transform.Rotation.Y == -180;
        }
    }

    function OnCollisionStarted(event : CollisionEvent)
    {
        if(event.OtherObject.PlayerController != null || event.OtherObject.Name == ("DefaultTile") )
        this.Owner.Destroy();
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(this.VelocitySet)
        {
            this.Owner.Transform.Translation +=
                this.Velocity * event.Dt;
        }
        else if (this.Target != null)
        {
            this.VelocitySet = true;
            this.Velocity = this.Target.Transform.Translation -
                this.Owner.Transform.Translation;
            this.Velocity = Math.Normalize(this.Velocity);
            this.Velocity *= this.Speed;
        }
        
    }
}

    
    